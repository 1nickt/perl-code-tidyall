#!/usr/bin/perl
use Getopt::Long;
use Pod::Usage;
use Code::TidyAll::Util qw(can_load);
use Hash::MoreUtils qw(slice_def);
use strict;
use warnings;

sub usage {
    my $msg = shift;
    print "$msg\n" if $msg;
    require Pod::Usage;
    Pod::Usage::pod2usage( { verbose => 2 } );
}

my ( %params, $help );
my $class = 'Code::TidyAll';

GetOptions(
    'backup-ttl=i' => \$params{backup_ttl},
    'class=s'      => \$class,
    'data-dir=s'   => \$params{data_dir},
    'no-backups'   => \$params{no_backups},
    'no-cache'     => \$params{no_cache},
    'c|conf=s'     => \$params{conf_file},
    'h|help'       => \$help,
    'r|recursive'  => \$params{recursive},
    'v|verbose'    => \$params{verbose},
) or usage();

usage("") if $help;
usage("-c|--conf required") if !defined( $params{conf_file} );
die "cannot load '$class'" unless can_load($class);

%params = slice_def( \%params );

my @paths = @ARGV or usage("path(s) required");

my $ct = $class->new(%params);
$ct->process_paths(@paths);

1;

__END__

=head1 NAME

tidyall - Your all-in-one code tidier and validator

=head1 SYNOPSIS

    # Process one or more specific files
    tidyall -c /path/to/config file [file...]

    # Process all files under a directory
    tidyall -c /path/to/config -r dir

=head1 OPTIONS

 -c, --conf       Required configuration file
 -h, --help       Print help message
 -r, --recursive  Descend into directories recursively
 --backup-ttl     When backup files can be purged. Defaults to "1d"
 --class          Code::TidyAll subclass to use. Defaults to "Code::TidyAll"
 --data-dir       Container for backups, cache, etc. Defaults to dir of conf file
 --no-backup      Don't backup files
 --no-cache       Don't cache last processed times; process all files every time

=head1 DESCRIPTION

There are a lot of great code tidiers and validators out there. C<tidyall>
makes them available from a single unified interface.

You can run C<tidyall> on a single file or an entire hierarchy of files, and
configure which tidiers/validators are applied to which types of files.
C<tidyall> will back up files beforehand, and for efficiency will only consider
files that have changed since they were last processed.

=head2 What's a tidier? What's a validator?

A I<tidier> transforms a file so as to improve its appearance without changing
its semantics. Examples include L<perltidy>, L<podtidy> and
L<htmltidy|HTML::Tidy>.

A I<validator> analyzes a file for some definition of correctness. Examples
include L<perlcritic>, L<podchecker> and
L<xmllint|http://xmlsoft.org/xmllint.html>.

Many tidiers are also validators, e.g. C<perltidy> will throw an error on badly
formed Perl.

=head1 CONFIGURATION

An INI-style config file, specified with -c, is required to use C<tidyall>. If
the path is of the form I<dir>/.../I<file>, it will look upwards from I<dir>
for I<file>.

Here's a sample config file:

    [PerlTidy]
    argv = -noll -it=2
    include = *.pl *.pm *.t

    [PerlCritic]
    argv = -severity 3

    [PodTidy]

    [HTMLTidy]
    argv = -wrap 70 -indent

Section 1 says to apply C<PerlTidy> with settings "-noll -it=2" to all Perl
scripts, modules and test files.

Section 2 says to apply C<PerlCritic> with severity 3. Since there is no
C<include> clause, the default for C<PerlCritic> plugin is used, which happens
to be the same as above: "*.pl *.pm *.t".

Section 3 says to apply C<PodTidy> with default settings, to the same set of
default files "*.pl *.pm *.t".

Section 4 says to apply C<HTMLTidy> with settings "-wrap 70 -indent" against
the default set of files, in this case "*.html *.htm".

=head2 Standard configuration elements

=over

=item [class]

The header of each configuration section refers to a tidyall I<plugin>. The
name is automatically prefixed with C<Code::TidyAll::Plugin::> unless it begins
with a '+', e.g.

    # Uses plugin Code::TidyAll::Plugin::PerlTidy
    [PerlTidy]

    # Uses plugin My::TidyAll::Plugin
    [+My::TidyAll::Plugin]

=item include

One or more glob patterns indicating which files to include, separated by
whitespace. If not specified, use the default set for the plugin.

=item exclude

One or more glob patterns indicating which files to exclude, separated by
whitespace. This overrides C<include>.

=back

=head1 DATA DIRECTORY

C<tidyall> keeps cache and backup files (below) under a data directory. It can
be specified with C<--data-dir>; by default it is a directory named
".tidyall.d" in the same path as the config file.

=head1 LAST-PROCESSED CACHE

C<tidyall> keeps track of each file's signature after it was last processed. On
subsequent runs, it will only process a file if its signature has changed.

You can turn off this behavior with C<--no-cache>.

=head1 BACKUPS

C<tidyall> will backup each file before modifying it. The timestamped backups
are kept in a separate directory hierarchy under the data dir.

Old backup files will be purged automatically as part of occasional C<tidyall>
runs. The duration specified in C<--backup-ttl> indicates both the minimum
amount of time backups should be kept, and the frequency that purges should be
run. It may be specified as "30min" or "4h" or any string acceptable to
L<Time::Duration::Parse>. It defaults to "1h" (1 hour).

You can turn off backups with C<--no-backups>.

